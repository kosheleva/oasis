openapi: 3.0.1
info:
  title: OASIS Mock API
  version: 1.0.0
  contact:
    url: 'https://github.com/x1n13y84issmd42/oasis'
  description: 'This is a mock of an API used to develop & test Oasis, an application to automatically test APIs using Open API Spec definition files. '
tags:
  - name: public
  - name: secure
  - name: primitive
  - name: composite
  - name: metadata
  - name: format
  - name: failure
  - name: example
  - name: get
  - name: post
  - name: user
  - name: apikey
servers:
  - url: 'http://localhost'
    description: Localhost
paths:
  /api/secure/http-basic/get:
    get:
      tags:
        - secure
        - primitive
      operationId: secure-http-basic
      summary: Secure HTTP Basic
      description: 'Requires a Basic HTTP Security & responds with a 200 status.'
      responses:
        '200':
          description: OK
      security:
        - HTTP Basic: []
  /api/secure/http-digest/get:
    get:
      tags:
        - secure
        - primitive
      operationId: secure-http-digest
      summary: Secure HTTP Digest
      description: 'Requires a Digest HTTP Security & responds with a 200 status.'
      responses:
        '200':
          description: OK
      security:
        - HTTP Digest: []
  /api/public/meta/headers/boolean/fail/schema:
    get:
      tags:
        - public
        - primitive
        - metadata
        - failure
      operationId: meta-bool-fail
      summary: Meta Bool Fail
      description: Responds with a 200 status and a X-Truth header with a non-boolean value.
      responses:
        '200':
          description: OK
          headers:
            X-Truth:
              schema:
                type: boolean
              required: true
              description: Your unreliable source of truth.
  /api/public/meta/headers/boolean:
    get:
      tags:
        - public
        - primitive
        - metadata
      operationId: meta-bool
      summary: Meta Bool
      description: Responds with a 200 status and a X-Truth header with a random boolean value.
      responses:
        '200':
          description: OK
          headers:
            X-Truth:
              schema:
                type: boolean
              required: true
              description: Your source of truth.
  /api/public/meta/headers/number/fail/schema:
    get:
      tags:
        - public
        - primitive
        - metadata
        - failure
      operationId: meta-number-fail
      summary: Meta Number Fail
      description: Responds with a 200 status and a X-Num header with a floating point value.
      responses:
        '200':
          description: OK
          headers:
            X-Num:
              schema:
                type: number
              required: true
              description: 'A Pie!'
  /api/public/meta/headers/number:
    get:
      tags:
        - public
        - primitive
        - metadata
      operationId: meta-number
      summary: Meta Number
      description: Responds with a 200 status and a X-Num header with a floating point value.
      responses:
        '200':
          description: OK
          headers:
            X-Num:
              schema:
                type: number
              required: true
              description: A Pi value.
  /api/public/meta/headers/integer/fail:
    get:
      tags:
        - public
        - primitive
        - metadata
        - failure
      operationId: meta-integer-fail
      summary: Meta Integer Fail
      description: Responds with a 200 status and a X-Num header with a non-numeric value.
      responses:
        '200':
          description: OK
          headers:
            X-Num:
              schema:
                type: integer
              required: true
              description: 'A wrong answer to the ultimate question of life, universe and everything.'
      security:
        - HTTP Basic: []
  /api/public/meta/headers/integer:
    get:
      tags:
        - public
        - primitive
        - metadata
      operationId: meta-integer
      summary: Meta Integer
      description: Responds with a 200 status and a X-Num header with an integer value.
      responses:
        '200':
          description: OK
          headers:
            X-Num:
              schema:
                type: integer
              required: true
              description: 'An answer to the ultimate question of life, universe and everything.'
  /api/public/meta/headers/redirect:
    get:
      tags:
        - public
        - metadata
      operationId: redirect
      summary: Redirect
      description: Responds with a 302 status and a Location header.
      responses:
        '302':
          description: Found
          headers:
            Location:
              schema:
                type: string
              required: true
              description: A location to redirect a client to.
  /api/public/array/visits/fail:
    get:
      tags:
        - public
        - composite
        - failure
      operationId: list-visits-fail
      summary: List visits failing
      description: 'Responds with an array of objects defined inline, but malformed.'
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - IP
                    - counter
                    - createdAt
                  type: object
                  properties:
                    createdAt:
                      type: string
                      format: date-time
                    IP:
                      type: string
                    counter:
                      type: number
  /api/public/array/visits:
    get:
      tags:
        - public
        - composite
      operationId: list-visits
      summary: List visits
      description: Responds with an array of objects defined inline.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  required:
                    - IP
                    - counter
                    - createdAt
                  type: object
                  properties:
                    createdAt:
                      type: string
                      format: date-time
                    IP:
                      type: string
                    counter:
                      type: number
  '/api/public/object/user/{UID}/fail':
    get:
      tags:
        - public
        - composite
        - example
        - failure
      operationId: get-user-fail
      summary: Single user failing
      description: Responds wih a malformed single User object.
      parameters:
        - name: UID
          in: path
          description: An ID of a user to retrieve
          required: true
          schema:
            type: string
          example: '345'
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  '/api/public/object/user/{UID}':
    get:
      tags:
        - public
        - composite
        - example
      operationId: get-user
      summary: Single user
      description: Responds wih a single User object.
      parameters:
        - name: UID
          in: path
          description: An ID of a user to retrieve (op level)
          required: true
          schema:
            type: string
          example: '345'
      responses:
        '200':
          description: Status 200
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples: {}
    parameters:
      - schema:
          type: integer
        name: UID
        in: path
        required: true
        description: A user ID to retrieve (path level).
        example: '123'
    post:
      summary: Create user
      operationId: post-user
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Creates a new User instance.
      security:
        - HTTP Basic: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              op-level-example:
                value:
                  name: John Doe
                  email: johnny@doe.com
        description: Complete User data goes as a request body.
      tags:
        - post
        - user
        - composite
  /api/public/array/users/fail:
    get:
      tags:
        - public
        - composite
        - failure
      operationId: list-users-fail
      summary: List users failing
      description: Responds with an array of malformed User objects.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
  /api/public/array/users:
    get:
      tags:
        - public
        - composite
      operationId: list-users
      summary: List users
      description: Responds with an array of User objects.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: ''
      operationId: create-user
      responses:
        '201':
          description: Created
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      description: Adds a new user record.
      tags:
        - user
        - composite
  /api/public/array/numbers:
    get:
      tags:
        - public
        - composite
      operationId: list-numbers
      summary: List numbers
      description: Responds with an array of numbers.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: number
  /api/public/array/strings:
    get:
      tags:
        - public
        - composite
      operationId: list-strings
      summary: List strings
      description: Responds with an array of strings.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/public/primitive/datetime:
    get:
      tags:
        - public
        - primitive
        - format
      operationId: get-date-time
      summary: 'Get date & time'
      description: Responds with a string in DateTime format.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                format: date-time
  /api/public/primitive/date:
    get:
      tags:
        - public
        - primitive
        - format
      operationId: get-date
      summary: Get date
      description: Responds with a single random Date.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
                format: date
  /api/public/primitive/time:
    get:
      tags:
        - public
        - primitive
        - format
      operationId: get-time
      summary: Get time
      description: Responds with a string in time format.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
  /api/public/primitive/boolean:
    get:
      tags:
        - public
        - primitive
      operationId: get-boolean
      summary: Get boolean
      description: Responds with a single random boolean.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: boolean
  /api/public/primitive/number:
    get:
      tags:
        - public
        - primitive
      operationId: get-number
      summary: Get number
      description: Responds with a single random number.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: number
  /api/public/primitive/string:
    get:
      tags:
        - public
        - primitive
      operationId: get-string
      summary: Get string
      description: Responds with a single string.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: string
  '/api/public/object/user/{UID}/fail/status':
    parameters:
      - schema:
          type: string
        name: UID
        in: path
        required: true
        example: '666'
    post:
      summary: Fails to create a user due to 400
      operationId: post-user-fail-status
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      description: Atempts to create a user but fails due to a Bad Request error.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Complete user data.
      tags:
        - failure
        - metadata
        - composite
  /api/secure/apikey-header/get:
    get:
      summary: Secure API Key Header
      tags:
        - secure
        - apikey
      responses:
        '200':
          description: OK
      operationId: secure-apikey-header
      security:
        - API Key - Header: []
      description: Requests a resource which requires an API key in a header.
  /api/secure/apikey-query/get:
    get:
      summary: Secure API Key Query
      tags: []
      responses:
        '200':
          description: OK
      operationId: secure-apikey-query
      security:
        - API Key - Query: []
      description: Requests a resource which requires an API key in a query string.
  /api/public/meta/query/echo/headers:
    get:
      summary: Echo query to headers
      tags:
        - metadata
      responses:
        '200':
          description: OK
          headers:
            x-p1:
              schema:
                type: string
              description: A string value from the p1 query parameter.
              required: true
            x-p2:
              schema:
                type: number
              description: A numeric value from the p2 query parameter.
              required: true
            x-p3:
              schema:
                type: string
              description: An optional tring value from the p3 query parameter.
      operationId: meta-query-echo-headers
      description: Echoes all the passed query parameters as response header values.
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: p1
          description: A required string parameter.
          example: totally tested
        - schema:
            type: number
          in: query
          name: p2
          description: A required number parameter.
          required: true
          example: '3.1415'
        - schema:
            type: string
          in: query
          name: p3
          description: An optional string parameter.
    parameters: []
  /api/public/meta/query/echo/body:
    get:
      summary: Echo query to body
      tags:
        - metadata
      operationId: meta-query-echo-body
      description: Echoes all the passed query parameters as a JSON object in response body.
      parameters:
        - schema:
            type: string
          in: query
          required: true
          name: p1
          description: A required string parameter.
          example: totally tested
        - schema:
            type: number
          in: query
          name: p2
          description: A required number parameter.
          required: true
          example: '3.1415'
        - schema:
            type: number
          in: query
          name: p3
          description: An optional string parameter.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  prop_p1:
                    type: string
                  prop_p2:
                    type: number
                  prop_p3:
                    type: number
                required:
                  - prop_p1
                  - prop_p2
    parameters: []
  /api/public/meta/headers/echo/body:
    get:
      summary: Echo headers to body
      tags:
        - metadata
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  prop_header:
                    type: string
                  prop_armer:
                    type: integer
                  prop_legger:
                    type: string
                required:
                  - prop_header
                  - prop_armer
      operationId: meta-headers-echo-body
      description: Echoes all the incoming headers in response as a JSON object properties.
      parameters:
        - schema:
            type: string
          in: header
          name: x-header
          required: true
          description: A required string header.
          example: (-_-)
        - schema:
            type: integer
          in: header
          name: x-armer
          required: true
          description: A required integer header.
          example: '9060'
        - schema:
            type: boolean
          in: header
          name: x-legger
          description: An optional boolean header.
  /api/secure/apikey-cookie/get:
    get:
      summary: Secure API Key Cookie
      tags:
        - secure
      responses:
        '200':
          description: OK
      operationId: secure-apikey-cookie
      security:
        - API Key - Cookie: []
      description: Requests a resource which requires an API key in a cookie.
components:
  schemas:
    User:
      required:
        - createdAt
        - email
        - name
        - token
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        createdAt:
          type: string
          format: date-time
        token:
          type: string
      example: "{\r\n\"name\": \"Seamus Gulgowski\",\r\n\"email\": \"Eldridge87@hotmail.com\",\r\n\"createdAt\": \"2019-03-01T21:58:16.596Z\",\r\n\"token\": \"f5f8cf46-7ed9-465c-827a-3c39470b178b\"\r\n}"
      x-examples:
        model-level-example:
          name: Petra The African Gray Parrot
          email: petra@afri.ca
  securitySchemes:
    HTTP Basic:
      type: http
      scheme: basic
      x-token_: Basic dXNlcjoxMjM=
      x-username: admin
      x-password: 4dm1n_31337
    HTTP Digest:
      type: http
      scheme: digest
      x-example: Digest username="user", realm="Oasis", nonce="7e50fdb3cf9024da3bdf1f15f1c41372", uri="/api/secure/http-digest/get", response="bb656d0dae95403f6e2f99a321e149c9", opaque="823c8ce66a22b4c84642acff2b852354"
    HTTP Bearer:
      type: http
      scheme: bearer
    API Key - Query:
      name: key
      type: apiKey
      in: query
      x-example: GOT_A_SECRET_CAN_YOU_KEEP_IT
    API Key - Header:
      name: x-api-key
      type: apiKey
      in: header
      x-example: GOT_A_SECRET_CAN_YOU_KEEP_IT
    API Key - Cookie:
      name: api_key
      type: apiKey
      in: cookie
      x-example: GOT_A_SECRET_CAN_YOU_KEEP_IT
